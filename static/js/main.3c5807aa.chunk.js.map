{"version":3,"sources":["Components/Teams.js","Components/PlayerTable.js","Components/Dnd.js","Components/Randomizer.js","App.js","reportWebVitals.js","index.js"],"names":["Teams","redTeam","blueTeam","setAllPlayers","handleRandomize","useState","tracked","setTracked","teamACards","map","person","index","Card","className","Title","name","Header","role","teamBCards","output","card","Row","Col","style","width","display","justifyContent","margin","Button","variant","type","onClick","forEach","element","wins","loses","backgroundColor","PlayerTable","allPlayers","sort","a","b","Table","striped","bordered","player","winrate","Math","round","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","color","background","getListStyle","isDraggingOver","height","Dnd","players","setPlayers","useEffect","id2List","droppable","droppable2","getList","id","onDragEnd","result","source","destination","droppableId","sourceList","destList","droppableSource","droppableDestination","sourceClone","Array","from","destClone","splice","removed","move","items","selected","marginRight","provided","snapshot","droppableProps","ref","innerRef","marginTop","marginLeft","item","draggableId","draggableProps","dragHandleProps","placeholder","ppl","Randomizer","setBlueTeam","setRedTeam","len","length","blueRoles","redRoles","remaining","push","playerClone","rTeam","bTeam","floor","random","Container","alignItems","marginBottom","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c5807aa.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst Teams = ({ redTeam, blueTeam, setAllPlayers, handleRandomize }) => {\r\n    const [tracked, setTracked] = useState(false);\r\n\r\n    const handlePlayAgain = () => {\r\n        handleRandomize();\r\n        setTracked(false);\r\n    }\r\n\r\n    const teamACards = blueTeam.map((person, index) => {\r\n        return (\r\n            <Card className=\"bg-dark text-white\" key={index}>\r\n                <Card.Title>{person.name}</Card.Title>\r\n                <Card.Header>{person.role}</Card.Header>\r\n            </Card>\r\n        )\r\n    });\r\n\r\n    const teamBCards = redTeam.map((person, index) => {\r\n        return (\r\n            <Card className=\"bg-dark text-white\" key={index}>\r\n                <Card.Title>{person.name}</Card.Title>\r\n                <Card.Header>{person.role}</Card.Header>\r\n            </Card>\r\n        )\r\n    });\r\n\r\n    const output = teamACards.map((card, index) => {\r\n        return (\r\n            <Row key={index}>\r\n                <Col >\r\n                    {card}\r\n                </Col >\r\n                <Col style={{ width: '20rem' }}>\r\n                    {teamBCards[index]}\r\n                </Col>\r\n            </Row>\r\n        )\r\n    });\r\n\r\n    const handleRedWinButton = () => {\r\n        redTeam.forEach(element => {\r\n            element.wins++;\r\n        });\r\n        blueTeam.forEach(element => {\r\n            element.loses++;\r\n        });\r\n        setAllPlayers([...redTeam, ...blueTeam]);\r\n        setTracked(true);\r\n    }\r\n\r\n    const handleBlueWinButton = () => {\r\n        blueTeam.forEach(element => {\r\n            element.wins++;\r\n        });\r\n        redTeam.forEach(element => {\r\n            element.loses++;\r\n        });\r\n        setAllPlayers([...redTeam, ...blueTeam]);\r\n        setTracked(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {output}\r\n            <div style={{ display: 'flex', justifyContent: 'space-around', margin: '1rem 0rem 1rem 0rem' }}>\r\n                {!tracked ? (\r\n                    <>\r\n                        <Button variant=\"dark\" type=\"button\" onClick={handleBlueWinButton} style={{ backgroundColor: '#00008B' }}>\r\n                            Blue wins\r\n                        </Button>\r\n                        <Button variant=\"dark\" type=\"button\" onClick={handleRedWinButton} style={{ backgroundColor: '#8B0000' }}>\r\n                            Red wins\r\n                         </Button>\r\n                    </>) :\r\n                    (\r\n                        <Button variant=\"dark\" type=\"button\" onClick={handlePlayAgain}>\r\n                            Play again\r\n                         </Button>\r\n                    )}\r\n            </div>\r\n        </div >\r\n    );\r\n\r\n}\r\n\r\nexport default Teams;","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction PlayerTable({ allPlayers }) {\r\n    allPlayers.sort((a, b) => b.wins - a.wins);\r\n\r\n    return (\r\n        <Table striped bordered className=\"text-white\">\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Player</th>\r\n                    <th>Wins</th>\r\n                    <th>Loses</th>\r\n                    <th>W/R %</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {allPlayers.map((player, index) => {\r\n                    const winrate = player.wins / (player.wins + player.loses);\r\n                    return (\r\n                        <tr key={`${player}-${index}`}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{player.name}</td>\r\n                            <td>{player.wins}</td>\r\n                            <td>{player.loses}</td>\r\n                            <td>{winrate ? Math.round(winrate * 100) : 0}%</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nPlayerTable.propTypes = {\r\n    allPlayers: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default PlayerTable\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  color: \"black\",\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  padding: grid,\r\n  width: 150,\r\n  height: 750,\r\n});\r\n\r\nconst Dnd = ({ players, setPlayers, handleRandomize }) => {\r\n\r\n  useEffect(() => {\r\n    handleRandomize();\r\n  // eslint-disable-next-line\r\n  }, [players])\r\n  /**\r\n * A semi-generic way to handle multiple lists. Matches\r\n * the IDs of the droppable container to the names of the\r\n * source arrays stored in the state.\r\n */\r\n  const id2List = {\r\n    droppable: 'items',\r\n    droppable2: 'selected'\r\n  };\r\n\r\n  const getList = (id) => {\r\n    const list = players[id2List[id]]\r\n    return list;\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n\r\n    const { source, destination } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    // re-order the list\r\n    if (source.droppableId === destination.droppableId) {\r\n      return;\r\n    } else {\r\n      const sourceList = getList(source.droppableId);\r\n      const destList = getList(destination.droppableId);\r\n      if (sourceList && destList) {\r\n        const result = move(\r\n          sourceList,\r\n          destList,\r\n          source,\r\n          destination\r\n        );\r\n\r\n        setPlayers({\r\n          items: result.droppable,\r\n          selected: result.droppable2\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div style={{ display: 'flex' }}>\r\n        <div style={{ marginRight: '5rem' }}>\r\n          <Droppable droppableId=\"droppable\">\r\n            {(provided, snapshot) => (\r\n              <div\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n              >\r\n                <p style={{\r\n                  marginTop: '1rem',\r\n                  color: \"black\",\r\n                  marginLeft: '2.5rem',\r\n                }}>Available</p>\r\n                {players.items.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                      >\r\n                        {item.name}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n        <div style={{ marginRight: '5rem' }}>\r\n          <Droppable droppableId=\"droppable2\">\r\n            {(provided, snapshot) => (\r\n              <div\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n              >\r\n                <p style={{\r\n                  marginTop: '1rem',\r\n                  color: \"black\",\r\n                  marginLeft: '2.5rem',\r\n                }}>Selected</p>\r\n                {players.selected.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                      >\r\n                        {item.name}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Dnd;\r\n","import React, { useState } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Teams from './Teams';\r\nimport PlayerTable from './PlayerTable';\r\nimport DnD from './Dnd';\r\n\r\nconst ppl =\r\n    [{ id: '1', name: 'Sachin', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '2', name: 'Zack', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '3', name: 'Noel', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '4', name: 'Parth', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '5', name: 'Mark', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '6', name: 'Jonah', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '7', name: 'Jiali', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '8', name: 'Muhammed', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '9', name: 'Zach', wins: 0, loses: 0, role: 'jungler' },\r\n    { id: '10', name: 'Kyle', wins: 0, loses: 0, role: 'jungler' }]\r\nconst Randomizer = () => {\r\n    const [allPlayers, setAllPlayers] = useState(ppl);\r\n    const [blueTeam, setBlueTeam] = useState([]);\r\n    const [redTeam, setRedTeam] = useState([]);\r\n    const [players, setPlayers] = useState({ items: ppl, selected: [] });\r\n    \r\n    const handleRandomize = () => {\r\n        const len = players.selected.length;\r\n        if (len < 6 || len % 2 !== 0) {\r\n            return;\r\n        }\r\n        const blueRoles = [\"jungle\", \"lane\", \"lane\"];\r\n        const redRoles = [\"jungle\", \"lane\", \"lane\"];\r\n        let remaining = (len % 6) / 2;\r\n        while (remaining > 0) {\r\n            blueRoles.push(\"lane\");\r\n            redRoles.push(\"lane\");\r\n            remaining--;\r\n        }\r\n        const playerClone = Array.from(players.selected);\r\n        const rTeam = [];\r\n        const bTeam = [];\r\n        while (playerClone.length > 0) {\r\n            const [person] = playerClone.splice(Math.floor(Math.random() * playerClone.length), 1);\r\n            if (playerClone.length % 2 === 0) {\r\n                const [role] = redRoles.splice(Math.floor(Math.random() * redRoles.length), 1);\r\n                person.role=role;\r\n                rTeam.push(person);\r\n\r\n            } else {\r\n                const [role] = blueRoles.splice(Math.floor(Math.random() * blueRoles.length), 1);\r\n                person.role=role;\r\n                bTeam.push(person);\r\n            }\r\n        }\r\n        setBlueTeam(rTeam);\r\n        setRedTeam(bTeam);\r\n    }\r\n    return (\r\n        <Container>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: '5rem' }}>\r\n                <DnD players={players} setPlayers={setPlayers} handleRandomize={handleRandomize} />\r\n                {redTeam.length > 0 && blueTeam.length > 0 && (<div style={{ marginRight: '5rem', marginTop: '6rem' }}>\r\n                    <Teams redTeam={redTeam} blueTeam={blueTeam} players={players} setAllPlayers={setAllPlayers} handleRandomize={handleRandomize} />\r\n                </div>)}\r\n            </div>\r\n            <PlayerTable allPlayers={allPlayers} />\r\n        </Container >\r\n    );\r\n\r\n}\r\n\r\nexport default Randomizer;","import './App.css';\nimport Randomizer from './Components/Randomizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Randomizer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}